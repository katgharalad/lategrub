rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isCustomer() {
      return isAuthenticated() && 
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'customer' ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'both');
    }
    
    function isDeliveryPerson() {
      return isAuthenticated() && 
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'delivery' ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'both');
    }

    function isParticipantInOrder(orderId) {
      let orderDoc = get(/databases/$(database)/documents/orders/$(orderId));
      return orderDoc != null && 
             orderDoc.data != null && 
             (request.auth.uid == orderDoc.data.customerId || 
              (orderDoc.data.deliveryPersonId != null && request.auth.uid == orderDoc.data.deliveryPersonId));
    }

    function isValidTimestamp(ts) {
      return ts is timestamp && ts.toMillis() > 0;
    }

    function isValidOrderItems(items) {
      return items is list && 
             items.size() > 0 &&
             items[0].keys().hasAll(['name', 'quantity']) &&
             items[0].name is string &&
             items[0].quantity is number &&
             items[0].quantity > 0;
    }
    
    // Verification codes collection
    match /verification_codes/{docId} {
      allow read: if request.auth != null;
      allow delete: if request.auth != null && 
                     resource.data.email == request.auth.token.email;
      allow create: if request.resource.data.email.matches('.*@owu\\.edu$') &&
                     isValidTimestamp(request.resource.data.createdAt) &&
                     isValidTimestamp(request.resource.data.expiresAt) &&
                     request.resource.data.code is string &&
                     request.resource.data.code.size() >= 6;
    }
    
    // User profiles
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId;
    }
    
    // Orders
    match /orders/{orderId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.customerId ||
        request.auth.uid == resource.data.deliveryPersonId ||
        (isDeliveryPerson() && resource.data.status == 'ordered')
      );
      
      allow create: if isAuthenticated() && 
        request.resource.data.customerId == request.auth.uid &&
        request.resource.data.status == 'ordered' &&
        request.resource.data.items is list &&
        request.resource.data.items.size() > 0 &&
        request.resource.data.items[0].keys().hasAll(['name', 'quantity']) &&
        request.resource.data.deliveryAddress is string &&
        request.resource.data.deliveryAddress.size() > 0 &&
        request.resource.data.paymentMethod in ['cash', 'barter'] &&
        (request.resource.data.notes == null || request.resource.data.notes is string) &&
        (request.resource.data.paymentDetails == null || request.resource.data.paymentDetails is string) &&
        request.resource.data.customerName is string;
      
      allow update: if isAuthenticated() && (
        // Customer can update their own orders
        (request.auth.uid == resource.data.customerId) ||
        
        // Delivery person can accept unassigned orders
        (isDeliveryPerson() && 
         resource.data.deliveryPersonId == null && 
         request.resource.data.deliveryPersonId == request.auth.uid &&
         request.resource.data.status == 'waiting') ||
        
        // Assigned delivery person can update order status
        (isDeliveryPerson() && 
         resource.data.deliveryPersonId == request.auth.uid)
      );
    }
    
    // Messages
    match /messages/{messageId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() &&
        request.resource.data.keys().hasAll(['orderId', 'text', 'senderId', 'recipientId']) &&
        request.resource.data.senderId == request.auth.uid &&
        request.resource.data.text is string;
      allow update: if isAuthenticated() &&
        (request.auth.uid == resource.data.recipientId || request.auth.uid == resource.data.senderId);
    }

    // Ratings
    match /ratings/stats {
      allow read: if true;
      allow write: if false;
    }

    match /user_ratings/{userId} {
      allow read: if isAuthenticated();
      allow write: if request.auth.uid == userId;
    }
  }
}