rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isCustomer() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'customer';
    }
    
    function isDeliveryPerson() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'delivery';
    }

    function isParticipantInOrder(orderId) {
      let order = get(/databases/$(database)/documents/orders/$(orderId));
      return request.auth.uid == order.data.customerId || 
             request.auth.uid == order.data.deliveryPersonId;
    }
    
    // Verification codes collection
    match /verification_codes/{docId} {
      allow read, delete: if true;
      allow create: if request.resource.data.email.matches('.*@owu\\.edu$') &&
                     request.resource.data.createdAt is timestamp &&
                     request.resource.data.expiresAt is timestamp &&
                     request.resource.data.code is string;
    }
    
    // User profiles
    match /users/{userId} {
      allow read: if true;
      allow create: if request.resource.data.email.matches('.*@owu\\.edu$') &&
                     request.resource.data.role in ['customer', 'delivery'] &&
                     request.resource.data.keys().hasAll(['name', 'email', 'role', 'uid', 'emailVerified', 'createdAt', 'updatedAt']);
      allow update: if request.auth.uid == userId &&
                     (request.resource.data.diff(resource.data).affectedKeys()
                      .hasOnly(['emailVerified', 'updatedAt', 'photoURL', 'displayName', 'phone', 'address']));
    }
    
    // Orders
    match /orders/{orderId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.customerId ||
        request.auth.uid == resource.data.deliveryPersonId ||
        (isDeliveryPerson() && resource.data.status == 'ordered')
      );
      
      allow create: if isAuthenticated() && 
        request.resource.data.customerId == request.auth.uid &&
        request.resource.data.status == 'ordered' &&
        request.auth.token.email_verified == true;
      
      allow update: if isAuthenticated() && 
                     request.auth.token.email_verified == true && (
        request.auth.uid == resource.data.customerId ||
        (isDeliveryPerson() && 
         resource.data.deliveryPersonId == null && 
         request.resource.data.deliveryPersonId == request.auth.uid &&
         request.resource.data.status == 'waiting') ||
        (isDeliveryPerson() && 
         resource.data.deliveryPersonId == request.auth.uid)
      );
    }
    
    // Messages
    match /messages/{messageId} {
      allow read: if isAuthenticated() && 
                   request.auth.token.email_verified == true && 
                   isParticipantInOrder(resource.data.orderId);
      
      allow create: if isAuthenticated() && 
                    request.auth.token.email_verified == true &&
                    isParticipantInOrder(request.resource.data.orderId) &&
                    request.resource.data.text is string &&
                    request.resource.data.text.size() <= 1000;
      
      allow update: if isAuthenticated() && 
                    request.auth.token.email_verified == true &&
                    isParticipantInOrder(resource.data.orderId) &&
                    request.auth.uid == resource.data.recipientId &&
                    request.resource.data.diff(resource.data).affectedKeys()
                    .hasOnly(['read']);
    }
  }
} 