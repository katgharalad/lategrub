rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null && request.auth.token.email_verified == true;
    }
    
    function isCustomer() {
      return isAuthenticated() && 
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'customer' ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'both');
    }
    
    function isDeliveryPerson() {
      return isAuthenticated() && 
        (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'delivery' ||
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'both');
    }

    function isParticipantInOrder(orderId) {
      let orderDoc = get(/databases/$(database)/documents/orders/$(orderId));
      return orderDoc != null && 
             orderDoc.data != null && 
             (request.auth.uid == orderDoc.data.customerId || 
              (orderDoc.data.deliveryPersonId != null && request.auth.uid == orderDoc.data.deliveryPersonId));
    }

    function isValidTimestamp(ts) {
      return ts is timestamp && ts.toMillis() > 0;
    }

    function isValidOrderItems() {
      let items = request.resource.data.items;
      return items is list && 
             items.size() > 0 &&
             items[0].keys().hasAll(['name', 'price', 'quantity']) &&
             items[0].name is string &&
             items[0].price is number &&
             items[0].price > 0 &&
             items[0].quantity is number &&
             items[0].quantity > 0;
    }
    
    // Verification codes collection
    match /verification_codes/{docId} {
      allow read: if request.auth != null;
      allow delete: if request.auth != null && 
                     resource.data.email == request.auth.token.email;
      allow create: if request.resource.data.email.matches('.*@owu\\.edu$') &&
                     isValidTimestamp(request.resource.data.createdAt) &&
                     isValidTimestamp(request.resource.data.expiresAt) &&
                     request.resource.data.code is string &&
                     request.resource.data.code.size() >= 6;
    }
    
    // User profiles
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == userId &&
                     request.resource.data.email.matches('.*@owu\\.edu$') &&
                     request.resource.data.role in ['customer', 'delivery', 'both'] &&
                     request.resource.data.keys().hasAll(['name', 'email', 'role', 'uid', 'emailVerified', 'createdAt', 'updatedAt']) &&
                     isValidTimestamp(request.resource.data.createdAt) &&
                     isValidTimestamp(request.resource.data.updatedAt);
      allow update: if request.auth.uid == userId &&
                     (request.resource.data.diff(resource.data).affectedKeys()
                      .hasOnly(['emailVerified', 'updatedAt', 'photoURL', 'displayName', 'phone', 'address', 'role', 'sessionRole']) &&
                     (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['role']) || 
                      request.resource.data.role in ['customer', 'delivery', 'both']) &&
                     (!request.resource.data.diff(resource.data).affectedKeys().hasAny(['sessionRole']) || 
                      request.resource.data.sessionRole in ['customer', 'delivery'])) &&
                     isValidTimestamp(request.resource.data.updatedAt);
    }
    
    // Orders
    match /orders/{orderId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.customerId ||
        request.auth.uid == resource.data.deliveryPersonId ||
        (isDeliveryPerson() && resource.data.status == 'ordered')
      );
      
      allow create: if isAuthenticated() && 
        request.resource.data.customerId == request.auth.uid &&
        request.resource.data.status == 'ordered' &&
        request.resource.data.keys().hasAll(['customerId', 'status', 'total', 'items', 'createdAt', 'updatedAt', 'deliveryAddress', 'customerName']) &&
        request.resource.data.items is list &&
        request.resource.data.items.size() > 0 &&
        request.resource.data.total is number &&
        request.resource.data.total > 0 &&
        request.resource.data.deliveryAddress is string &&
        request.resource.data.deliveryAddress.size() > 0 &&
        request.resource.data.customerName is string &&
        (request.resource.data.notes == null || 
         (request.resource.data.notes is string && 
          request.resource.data.notes.size() <= 1000)) &&
        (request.resource.data.paymentMethod == null ||
         request.resource.data.paymentMethod in ['cash', 'barter']) &&
        (request.resource.data.paymentDetails == null ||
         (request.resource.data.paymentDetails is string &&
          request.resource.data.paymentDetails.size() <= 500)) &&
        isValidTimestamp(request.resource.data.createdAt) &&
        isValidTimestamp(request.resource.data.updatedAt);
      
      allow update: if isAuthenticated() && (
        (request.auth.uid == resource.data.customerId && 
         request.resource.data.diff(resource.data).affectedKeys()
         .hasOnly(['status', 'updatedAt'])) ||
        (isDeliveryPerson() && 
         resource.data.deliveryPersonId == null && 
         request.resource.data.deliveryPersonId == request.auth.uid &&
         request.resource.data.status == 'waiting') ||
        (isDeliveryPerson() && 
         resource.data.deliveryPersonId == request.auth.uid &&
         request.resource.data.diff(resource.data).affectedKeys()
         .hasOnly(['status', 'updatedAt']))
      ) && isValidTimestamp(request.resource.data.updatedAt);
    }
    
    // Messages
    match /messages/{messageId} {
      allow read: if isAuthenticated() && 
        isParticipantInOrder(resource.data.orderId);
      
      allow create: if isAuthenticated() &&
        request.resource.data.keys().hasAll([
          'orderId', 
          'text', 
          'senderId', 
          'recipientId', 
          'timestamp', 
          'read',
          'sender',
          'recipient'
        ]) &&
        request.resource.data.senderId == request.auth.uid &&
        request.resource.data.sender.keys().hasAll(['id', 'name', 'photo', 'role']) &&
        request.resource.data.recipient.keys().hasAll(['id', 'name', 'photo', 'role']) &&
        request.resource.data.text is string &&
        request.resource.data.text.size() <= 1000 &&
        request.resource.data.text.size() > 0 &&
        isParticipantInOrder(request.resource.data.orderId) &&
        request.resource.data.read == false;
      
      allow update: if isAuthenticated() &&
        (request.auth.uid == resource.data.recipientId || request.auth.uid == resource.data.senderId) &&
        isParticipantInOrder(resource.data.orderId) &&
        (
          (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read', 'updatedAt']) &&
           request.resource.data.read == true) ||
          (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['updatedAt']))
        );
    }

    // Ratings
    match /ratings/stats {
      allow read: if true;
      allow create: if request.resource.data.keys().hasAll(['totalRatings', 'totalScore', 'ratings']) &&
                     request.resource.data.totalRatings == 1 &&
                     request.resource.data.totalScore >= 1 &&
                     request.resource.data.totalScore <= 5 &&
                     request.resource.data.ratings is map;
      allow update: if request.resource.data.diff(resource.data).affectedKeys()
                     .hasOnly(['totalRatings', 'totalScore', 'ratings']) &&
                     (request.resource.data.totalRatings == resource.data.totalRatings + 1) &&
                     (request.resource.data.totalScore >= resource.data.totalScore + 1) &&
                     (request.resource.data.totalScore <= resource.data.totalScore + 5);
    }

    match /user_ratings/{userId} {
      allow read: if request.auth != null;
      allow create, update: if request.auth != null && 
                            request.auth.uid == userId &&
                            request.resource.data.keys().hasAll(['rating', 'timestamp']) &&
                            request.resource.data.rating >= 1 &&
                            request.resource.data.rating <= 5 &&
                            isValidTimestamp(request.resource.data.timestamp);
    }
  }
}